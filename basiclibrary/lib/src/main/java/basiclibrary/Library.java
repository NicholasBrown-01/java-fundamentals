/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;
import java.util.ArrayList;
import java.util.Random;

public class Library {

    //Thank you Tony for explaining no need for public void Main

    // Roll Method
    public int[] rollMethod(int userRolls) {


        Random random = new Random();

        int[] diceArray = new int[userRolls];

        for (int i = 0; i < userRolls; i++) {
            diceArray[i] = random.nextInt(6) + 1;
        }
        return diceArray;
    }

    // Contains Duplicates Method
    public boolean containsDuplicatesMethod(int[] firstArray) {

        // This still does not test the whole array. Only the index after it.
        for (int i = 0; i < firstArray.length - 1; i++) {
            if (firstArray[i] == firstArray[i + 1]) {
                return true;
            }

        }

        return false;
    }

    //help from JavaCodeGeeks site

    // Calculating Averages Method
    public float averagingMethod(int[] array) {

        float lastSum = 0;

        for (int i = 0; i < array.length; i++) {
            lastSum += array[i];
        }

        float averageOfArray = lastSum / array.length;

        return averageOfArray;
    }
    // help from javacodegeeks, javatpoint, TA's, stackoverflow, tutorialspoint, gpt.

    // Array of Arrays
    public int[] arrayAverager() {

        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        int[] lowestAvgArray = weeklyMonthTemperatures[0]; // have to have this to begin comparing
        float lowestAvg = averagingMethod(weeklyMonthTemperatures[0]);

        for (int i = 1; i < weeklyMonthTemperatures.length; i++) {
            float currentAvg = averagingMethod(weeklyMonthTemperatures[i]);
            if (currentAvg < lowestAvg) {
                lowestAvg = currentAvg;
                lowestAvgArray = weeklyMonthTemperatures[i];
            }
        }

        return lowestAvgArray;
    }
}